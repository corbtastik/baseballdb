/*
 * This file is generated by jOOQ.
*/
package io.corbs.baseballdb.schema.tables;


import io.corbs.baseballdb.schema.Baseballdb;
import io.corbs.baseballdb.schema.tables.records.PitchingRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pitching extends TableImpl<PitchingRecord> {

    private static final long serialVersionUID = 2074170358;

    /**
     * The reference instance of <code>baseballdb.Pitching</code>
     */
    public static final Pitching PITCHING = new Pitching();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PitchingRecord> getRecordType() {
        return PitchingRecord.class;
    }

    /**
     * The column <code>baseballdb.Pitching.playerID</code>.
     */
    public final TableField<PitchingRecord, String> PLAYERID = createField("playerID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Pitching.yearID</code>.
     */
    public final TableField<PitchingRecord, Integer> YEARID = createField("yearID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.stint</code>.
     */
    public final TableField<PitchingRecord, Integer> STINT = createField("stint", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.teamID</code>.
     */
    public final TableField<PitchingRecord, String> TEAMID = createField("teamID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Pitching.lgID</code>.
     */
    public final TableField<PitchingRecord, String> LGID = createField("lgID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Pitching.W</code>.
     */
    public final TableField<PitchingRecord, Integer> W = createField("W", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.L</code>.
     */
    public final TableField<PitchingRecord, Integer> L = createField("L", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.G</code>.
     */
    public final TableField<PitchingRecord, Integer> G = createField("G", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.GS</code>.
     */
    public final TableField<PitchingRecord, Integer> GS = createField("GS", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.CG</code>.
     */
    public final TableField<PitchingRecord, Integer> CG = createField("CG", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.SHO</code>.
     */
    public final TableField<PitchingRecord, Integer> SHO = createField("SHO", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.SV</code>.
     */
    public final TableField<PitchingRecord, Integer> SV = createField("SV", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.IPouts</code>.
     */
    public final TableField<PitchingRecord, Integer> IPOUTS = createField("IPouts", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.H</code>.
     */
    public final TableField<PitchingRecord, Integer> H = createField("H", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.ER</code>.
     */
    public final TableField<PitchingRecord, Integer> ER = createField("ER", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.HR</code>.
     */
    public final TableField<PitchingRecord, Integer> HR = createField("HR", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.BB</code>.
     */
    public final TableField<PitchingRecord, Integer> BB = createField("BB", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.SO</code>.
     */
    public final TableField<PitchingRecord, Integer> SO = createField("SO", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.BAOpp</code>.
     */
    public final TableField<PitchingRecord, String> BAOPP = createField("BAOpp", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Pitching.ERA</code>.
     */
    public final TableField<PitchingRecord, Double> ERA = createField("ERA", org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>baseballdb.Pitching.IBB</code>.
     */
    public final TableField<PitchingRecord, String> IBB = createField("IBB", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Pitching.WP</code>.
     */
    public final TableField<PitchingRecord, String> WP = createField("WP", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Pitching.HBP</code>.
     */
    public final TableField<PitchingRecord, String> HBP = createField("HBP", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Pitching.BK</code>.
     */
    public final TableField<PitchingRecord, Integer> BK = createField("BK", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.BFP</code>.
     */
    public final TableField<PitchingRecord, String> BFP = createField("BFP", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Pitching.GF</code>.
     */
    public final TableField<PitchingRecord, String> GF = createField("GF", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Pitching.R</code>.
     */
    public final TableField<PitchingRecord, Integer> R = createField("R", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Pitching.SH</code>.
     */
    public final TableField<PitchingRecord, String> SH = createField("SH", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Pitching.SF</code>.
     */
    public final TableField<PitchingRecord, String> SF = createField("SF", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Pitching.GIDP</code>.
     */
    public final TableField<PitchingRecord, String> GIDP = createField("GIDP", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>baseballdb.Pitching</code> table reference
     */
    public Pitching() {
        this("Pitching", null);
    }

    /**
     * Create an aliased <code>baseballdb.Pitching</code> table reference
     */
    public Pitching(String alias) {
        this(alias, PITCHING);
    }

    private Pitching(String alias, Table<PitchingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pitching(String alias, Table<PitchingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Baseballdb.BASEBALLDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pitching as(String alias) {
        return new Pitching(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pitching rename(String name) {
        return new Pitching(name, null);
    }
}
