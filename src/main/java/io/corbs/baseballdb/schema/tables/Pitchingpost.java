/*
 * This file is generated by jOOQ.
*/
package io.corbs.baseballdb.schema.tables;


import io.corbs.baseballdb.schema.Baseballdb;
import io.corbs.baseballdb.schema.tables.records.PitchingpostRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pitchingpost extends TableImpl<PitchingpostRecord> {

    private static final long serialVersionUID = 1737569137;

    /**
     * The reference instance of <code>baseballdb.PitchingPost</code>
     */
    public static final Pitchingpost PITCHINGPOST = new Pitchingpost();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PitchingpostRecord> getRecordType() {
        return PitchingpostRecord.class;
    }

    /**
     * The column <code>baseballdb.PitchingPost.playerID</code>.
     */
    public final TableField<PitchingpostRecord, String> PLAYERID = createField("playerID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.PitchingPost.yearID</code>.
     */
    public final TableField<PitchingpostRecord, Integer> YEARID = createField("yearID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.round</code>.
     */
    public final TableField<PitchingpostRecord, String> ROUND = createField("round", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.PitchingPost.teamID</code>.
     */
    public final TableField<PitchingpostRecord, String> TEAMID = createField("teamID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.PitchingPost.lgID</code>.
     */
    public final TableField<PitchingpostRecord, String> LGID = createField("lgID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.PitchingPost.W</code>.
     */
    public final TableField<PitchingpostRecord, Integer> W = createField("W", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.L</code>.
     */
    public final TableField<PitchingpostRecord, Integer> L = createField("L", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.G</code>.
     */
    public final TableField<PitchingpostRecord, Integer> G = createField("G", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.GS</code>.
     */
    public final TableField<PitchingpostRecord, Integer> GS = createField("GS", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.CG</code>.
     */
    public final TableField<PitchingpostRecord, Integer> CG = createField("CG", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.SHO</code>.
     */
    public final TableField<PitchingpostRecord, Integer> SHO = createField("SHO", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.SV</code>.
     */
    public final TableField<PitchingpostRecord, Integer> SV = createField("SV", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.IPouts</code>.
     */
    public final TableField<PitchingpostRecord, Integer> IPOUTS = createField("IPouts", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.H</code>.
     */
    public final TableField<PitchingpostRecord, Integer> H = createField("H", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.ER</code>.
     */
    public final TableField<PitchingpostRecord, Integer> ER = createField("ER", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.HR</code>.
     */
    public final TableField<PitchingpostRecord, Integer> HR = createField("HR", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.BB</code>.
     */
    public final TableField<PitchingpostRecord, Integer> BB = createField("BB", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.SO</code>.
     */
    public final TableField<PitchingpostRecord, Integer> SO = createField("SO", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.BAOpp</code>.
     */
    public final TableField<PitchingpostRecord, Double> BAOPP = createField("BAOpp", org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.ERA</code>.
     */
    public final TableField<PitchingpostRecord, String> ERA = createField("ERA", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.PitchingPost.IBB</code>.
     */
    public final TableField<PitchingpostRecord, Integer> IBB = createField("IBB", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.WP</code>.
     */
    public final TableField<PitchingpostRecord, Integer> WP = createField("WP", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.HBP</code>.
     */
    public final TableField<PitchingpostRecord, Integer> HBP = createField("HBP", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.BK</code>.
     */
    public final TableField<PitchingpostRecord, Integer> BK = createField("BK", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.BFP</code>.
     */
    public final TableField<PitchingpostRecord, Integer> BFP = createField("BFP", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.GF</code>.
     */
    public final TableField<PitchingpostRecord, Integer> GF = createField("GF", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.R</code>.
     */
    public final TableField<PitchingpostRecord, Integer> R = createField("R", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.SH</code>.
     */
    public final TableField<PitchingpostRecord, Integer> SH = createField("SH", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.SF</code>.
     */
    public final TableField<PitchingpostRecord, Integer> SF = createField("SF", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.PitchingPost.GIDP</code>.
     */
    public final TableField<PitchingpostRecord, Integer> GIDP = createField("GIDP", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>baseballdb.PitchingPost</code> table reference
     */
    public Pitchingpost() {
        this("PitchingPost", null);
    }

    /**
     * Create an aliased <code>baseballdb.PitchingPost</code> table reference
     */
    public Pitchingpost(String alias) {
        this(alias, PITCHINGPOST);
    }

    private Pitchingpost(String alias, Table<PitchingpostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pitchingpost(String alias, Table<PitchingpostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Baseballdb.BASEBALLDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pitchingpost as(String alias) {
        return new Pitchingpost(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pitchingpost rename(String name) {
        return new Pitchingpost(name, null);
    }
}
