/*
 * This file is generated by jOOQ.
*/
package io.corbs.baseballdb.schema.tables.records;


import io.corbs.baseballdb.schema.tables.Fieldingof;
import io.corbs.baseballdb.schema.tables.interfaces.IFieldingof;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldingofRecord extends TableRecordImpl<FieldingofRecord> implements Record6<String, Integer, Integer, Integer, Integer, Integer>, IFieldingof {

    private static final long serialVersionUID = 157095501;

    /**
     * Setter for <code>baseballdb.FieldingOF.playerID</code>.
     */
    @Override
    public FieldingofRecord setPlayerid(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOF.playerID</code>.
     */
    @Override
    public String getPlayerid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>baseballdb.FieldingOF.yearID</code>.
     */
    @Override
    public FieldingofRecord setYearid(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOF.yearID</code>.
     */
    @Override
    public Integer getYearid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>baseballdb.FieldingOF.stint</code>.
     */
    @Override
    public FieldingofRecord setStint(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOF.stint</code>.
     */
    @Override
    public Integer getStint() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>baseballdb.FieldingOF.Glf</code>.
     */
    @Override
    public FieldingofRecord setGlf(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOF.Glf</code>.
     */
    @Override
    public Integer getGlf() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>baseballdb.FieldingOF.Gcf</code>.
     */
    @Override
    public FieldingofRecord setGcf(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOF.Gcf</code>.
     */
    @Override
    public Integer getGcf() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>baseballdb.FieldingOF.Grf</code>.
     */
    @Override
    public FieldingofRecord setGrf(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOF.Grf</code>.
     */
    @Override
    public Integer getGrf() {
        return (Integer) get(5);
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, Integer, Integer, Integer, Integer, Integer> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Fieldingof.FIELDINGOF.PLAYERID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Fieldingof.FIELDINGOF.YEARID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Fieldingof.FIELDINGOF.STINT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return Fieldingof.FIELDINGOF.GLF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return Fieldingof.FIELDINGOF.GCF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return Fieldingof.FIELDINGOF.GRF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getPlayerid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getYearid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getStint();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getGlf();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getGcf();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getGrf();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofRecord value1(String value) {
        setPlayerid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofRecord value2(Integer value) {
        setYearid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofRecord value3(Integer value) {
        setStint(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofRecord value4(Integer value) {
        setGlf(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofRecord value5(Integer value) {
        setGcf(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofRecord value6(Integer value) {
        setGrf(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofRecord values(String value1, Integer value2, Integer value3, Integer value4, Integer value5, Integer value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IFieldingof from) {
        setPlayerid(from.getPlayerid());
        setYearid(from.getYearid());
        setStint(from.getStint());
        setGlf(from.getGlf());
        setGcf(from.getGcf());
        setGrf(from.getGrf());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IFieldingof> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FieldingofRecord
     */
    public FieldingofRecord() {
        super(Fieldingof.FIELDINGOF);
    }

    /**
     * Create a detached, initialised FieldingofRecord
     */
    public FieldingofRecord(String playerid, Integer yearid, Integer stint, Integer glf, Integer gcf, Integer grf) {
        super(Fieldingof.FIELDINGOF);

        set(0, playerid);
        set(1, yearid);
        set(2, stint);
        set(3, glf);
        set(4, gcf);
        set(5, grf);
    }
}
