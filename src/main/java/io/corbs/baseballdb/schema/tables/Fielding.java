/*
 * This file is generated by jOOQ.
*/
package io.corbs.baseballdb.schema.tables;


import io.corbs.baseballdb.schema.Baseballdb;
import io.corbs.baseballdb.schema.tables.records.FieldingRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fielding extends TableImpl<FieldingRecord> {

    private static final long serialVersionUID = 2055673830;

    /**
     * The reference instance of <code>baseballdb.Fielding</code>
     */
    public static final Fielding FIELDING = new Fielding();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FieldingRecord> getRecordType() {
        return FieldingRecord.class;
    }

    /**
     * The column <code>baseballdb.Fielding.playerID</code>.
     */
    public final TableField<FieldingRecord, String> PLAYERID = createField("playerID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Fielding.yearID</code>.
     */
    public final TableField<FieldingRecord, Integer> YEARID = createField("yearID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Fielding.stint</code>.
     */
    public final TableField<FieldingRecord, Integer> STINT = createField("stint", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Fielding.teamID</code>.
     */
    public final TableField<FieldingRecord, String> TEAMID = createField("teamID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Fielding.lgID</code>.
     */
    public final TableField<FieldingRecord, String> LGID = createField("lgID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Fielding.POS</code>.
     */
    public final TableField<FieldingRecord, String> POS = createField("POS", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Fielding.G</code>.
     */
    public final TableField<FieldingRecord, Integer> G = createField("G", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Fielding.GS</code>.
     */
    public final TableField<FieldingRecord, String> GS = createField("GS", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Fielding.InnOuts</code>.
     */
    public final TableField<FieldingRecord, String> INNOUTS = createField("InnOuts", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Fielding.PO</code>.
     */
    public final TableField<FieldingRecord, Integer> PO = createField("PO", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Fielding.A</code>.
     */
    public final TableField<FieldingRecord, Integer> A = createField("A", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Fielding.E</code>.
     */
    public final TableField<FieldingRecord, Integer> E = createField("E", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Fielding.DP</code>.
     */
    public final TableField<FieldingRecord, Integer> DP = createField("DP", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.Fielding.PB</code>.
     */
    public final TableField<FieldingRecord, String> PB = createField("PB", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Fielding.WP</code>.
     */
    public final TableField<FieldingRecord, String> WP = createField("WP", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Fielding.SB</code>.
     */
    public final TableField<FieldingRecord, String> SB = createField("SB", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Fielding.CS</code>.
     */
    public final TableField<FieldingRecord, String> CS = createField("CS", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.Fielding.ZR</code>.
     */
    public final TableField<FieldingRecord, String> ZR = createField("ZR", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>baseballdb.Fielding</code> table reference
     */
    public Fielding() {
        this("Fielding", null);
    }

    /**
     * Create an aliased <code>baseballdb.Fielding</code> table reference
     */
    public Fielding(String alias) {
        this(alias, FIELDING);
    }

    private Fielding(String alias, Table<FieldingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fielding(String alias, Table<FieldingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Baseballdb.BASEBALLDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fielding as(String alias) {
        return new Fielding(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fielding rename(String name) {
        return new Fielding(name, null);
    }
}
