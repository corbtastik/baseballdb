/*
 * This file is generated by jOOQ.
*/
package io.corbs.baseballdb.schema.tables;


import io.corbs.baseballdb.schema.Baseballdb;
import io.corbs.baseballdb.schema.tables.records.FieldingpostRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fieldingpost extends TableImpl<FieldingpostRecord> {

    private static final long serialVersionUID = 1348730934;

    /**
     * The reference instance of <code>baseballdb.FieldingPost</code>
     */
    public static final Fieldingpost FIELDINGPOST = new Fieldingpost();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FieldingpostRecord> getRecordType() {
        return FieldingpostRecord.class;
    }

    /**
     * The column <code>baseballdb.FieldingPost.playerID</code>.
     */
    public final TableField<FieldingpostRecord, String> PLAYERID = createField("playerID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.FieldingPost.yearID</code>.
     */
    public final TableField<FieldingpostRecord, Integer> YEARID = createField("yearID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.FieldingPost.teamID</code>.
     */
    public final TableField<FieldingpostRecord, String> TEAMID = createField("teamID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.FieldingPost.lgID</code>.
     */
    public final TableField<FieldingpostRecord, String> LGID = createField("lgID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.FieldingPost.round</code>.
     */
    public final TableField<FieldingpostRecord, String> ROUND = createField("round", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.FieldingPost.POS</code>.
     */
    public final TableField<FieldingpostRecord, String> POS = createField("POS", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.FieldingPost.G</code>.
     */
    public final TableField<FieldingpostRecord, Integer> G = createField("G", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.FieldingPost.GS</code>.
     */
    public final TableField<FieldingpostRecord, Integer> GS = createField("GS", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.FieldingPost.InnOuts</code>.
     */
    public final TableField<FieldingpostRecord, Integer> INNOUTS = createField("InnOuts", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.FieldingPost.PO</code>.
     */
    public final TableField<FieldingpostRecord, Integer> PO = createField("PO", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.FieldingPost.A</code>.
     */
    public final TableField<FieldingpostRecord, Integer> A = createField("A", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.FieldingPost.E</code>.
     */
    public final TableField<FieldingpostRecord, Integer> E = createField("E", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.FieldingPost.DP</code>.
     */
    public final TableField<FieldingpostRecord, Integer> DP = createField("DP", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.FieldingPost.TP</code>.
     */
    public final TableField<FieldingpostRecord, Integer> TP = createField("TP", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.FieldingPost.PB</code>.
     */
    public final TableField<FieldingpostRecord, String> PB = createField("PB", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.FieldingPost.SB</code>.
     */
    public final TableField<FieldingpostRecord, String> SB = createField("SB", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.FieldingPost.CS</code>.
     */
    public final TableField<FieldingpostRecord, String> CS = createField("CS", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>baseballdb.FieldingPost</code> table reference
     */
    public Fieldingpost() {
        this("FieldingPost", null);
    }

    /**
     * Create an aliased <code>baseballdb.FieldingPost</code> table reference
     */
    public Fieldingpost(String alias) {
        this(alias, FIELDINGPOST);
    }

    private Fieldingpost(String alias, Table<FieldingpostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fieldingpost(String alias, Table<FieldingpostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Baseballdb.BASEBALLDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fieldingpost as(String alias) {
        return new Fieldingpost(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fieldingpost rename(String name) {
        return new Fieldingpost(name, null);
    }
}
