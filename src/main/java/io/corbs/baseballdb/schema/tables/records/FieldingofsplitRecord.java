/*
 * This file is generated by jOOQ.
*/
package io.corbs.baseballdb.schema.tables.records;


import io.corbs.baseballdb.schema.tables.Fieldingofsplit;
import io.corbs.baseballdb.schema.tables.interfaces.IFieldingofsplit;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record18;
import org.jooq.Row18;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldingofsplitRecord extends TableRecordImpl<FieldingofsplitRecord> implements Record18<String, Integer, Integer, String, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, String, String, String, String, String>, IFieldingofsplit {

    private static final long serialVersionUID = -1057555609;

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.playerID</code>.
     */
    @Override
    public FieldingofsplitRecord setPlayerid(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.playerID</code>.
     */
    @Override
    public String getPlayerid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.yearID</code>.
     */
    @Override
    public FieldingofsplitRecord setYearid(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.yearID</code>.
     */
    @Override
    public Integer getYearid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.stint</code>.
     */
    @Override
    public FieldingofsplitRecord setStint(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.stint</code>.
     */
    @Override
    public Integer getStint() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.teamID</code>.
     */
    @Override
    public FieldingofsplitRecord setTeamid(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.teamID</code>.
     */
    @Override
    public String getTeamid() {
        return (String) get(3);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.lgID</code>.
     */
    @Override
    public FieldingofsplitRecord setLgid(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.lgID</code>.
     */
    @Override
    public String getLgid() {
        return (String) get(4);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.POS</code>.
     */
    @Override
    public FieldingofsplitRecord setPos(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.POS</code>.
     */
    @Override
    public String getPos() {
        return (String) get(5);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.G</code>.
     */
    @Override
    public FieldingofsplitRecord setG(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.G</code>.
     */
    @Override
    public Integer getG() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.GS</code>.
     */
    @Override
    public FieldingofsplitRecord setGs(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.GS</code>.
     */
    @Override
    public Integer getGs() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.InnOuts</code>.
     */
    @Override
    public FieldingofsplitRecord setInnouts(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.InnOuts</code>.
     */
    @Override
    public Integer getInnouts() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.PO</code>.
     */
    @Override
    public FieldingofsplitRecord setPo(Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.PO</code>.
     */
    @Override
    public Integer getPo() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.A</code>.
     */
    @Override
    public FieldingofsplitRecord setA(Integer value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.A</code>.
     */
    @Override
    public Integer getA() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.E</code>.
     */
    @Override
    public FieldingofsplitRecord setE(Integer value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.E</code>.
     */
    @Override
    public Integer getE() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.DP</code>.
     */
    @Override
    public FieldingofsplitRecord setDp(Integer value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.DP</code>.
     */
    @Override
    public Integer getDp() {
        return (Integer) get(12);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.PB</code>.
     */
    @Override
    public FieldingofsplitRecord setPb(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.PB</code>.
     */
    @Override
    public String getPb() {
        return (String) get(13);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.WP</code>.
     */
    @Override
    public FieldingofsplitRecord setWp(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.WP</code>.
     */
    @Override
    public String getWp() {
        return (String) get(14);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.SB</code>.
     */
    @Override
    public FieldingofsplitRecord setSb(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.SB</code>.
     */
    @Override
    public String getSb() {
        return (String) get(15);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.CS</code>.
     */
    @Override
    public FieldingofsplitRecord setCs(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.CS</code>.
     */
    @Override
    public String getCs() {
        return (String) get(16);
    }

    /**
     * Setter for <code>baseballdb.FieldingOFsplit.ZR</code>.
     */
    @Override
    public FieldingofsplitRecord setZr(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.FieldingOFsplit.ZR</code>.
     */
    @Override
    public String getZr() {
        return (String) get(17);
    }

    // -------------------------------------------------------------------------
    // Record18 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row18<String, Integer, Integer, String, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, String, String, String, String, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row18<String, Integer, Integer, String, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, String, String, String, String, String> valuesRow() {
        return (Row18) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Fieldingofsplit.FIELDINGOFSPLIT.PLAYERID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Fieldingofsplit.FIELDINGOFSPLIT.YEARID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Fieldingofsplit.FIELDINGOFSPLIT.STINT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Fieldingofsplit.FIELDINGOFSPLIT.TEAMID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Fieldingofsplit.FIELDINGOFSPLIT.LGID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Fieldingofsplit.FIELDINGOFSPLIT.POS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field7() {
        return Fieldingofsplit.FIELDINGOFSPLIT.G;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field8() {
        return Fieldingofsplit.FIELDINGOFSPLIT.GS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field9() {
        return Fieldingofsplit.FIELDINGOFSPLIT.INNOUTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field10() {
        return Fieldingofsplit.FIELDINGOFSPLIT.PO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field11() {
        return Fieldingofsplit.FIELDINGOFSPLIT.A;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field12() {
        return Fieldingofsplit.FIELDINGOFSPLIT.E;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field13() {
        return Fieldingofsplit.FIELDINGOFSPLIT.DP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field14() {
        return Fieldingofsplit.FIELDINGOFSPLIT.PB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field15() {
        return Fieldingofsplit.FIELDINGOFSPLIT.WP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field16() {
        return Fieldingofsplit.FIELDINGOFSPLIT.SB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field17() {
        return Fieldingofsplit.FIELDINGOFSPLIT.CS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field18() {
        return Fieldingofsplit.FIELDINGOFSPLIT.ZR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getPlayerid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getYearid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getStint();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getTeamid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getLgid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getPos();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value7() {
        return getG();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value8() {
        return getGs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value9() {
        return getInnouts();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value10() {
        return getPo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value11() {
        return getA();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value12() {
        return getE();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value13() {
        return getDp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value14() {
        return getPb();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value15() {
        return getWp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value16() {
        return getSb();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value17() {
        return getCs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value18() {
        return getZr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value1(String value) {
        setPlayerid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value2(Integer value) {
        setYearid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value3(Integer value) {
        setStint(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value4(String value) {
        setTeamid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value5(String value) {
        setLgid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value6(String value) {
        setPos(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value7(Integer value) {
        setG(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value8(Integer value) {
        setGs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value9(Integer value) {
        setInnouts(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value10(Integer value) {
        setPo(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value11(Integer value) {
        setA(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value12(Integer value) {
        setE(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value13(Integer value) {
        setDp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value14(String value) {
        setPb(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value15(String value) {
        setWp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value16(String value) {
        setSb(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value17(String value) {
        setCs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord value18(String value) {
        setZr(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldingofsplitRecord values(String value1, Integer value2, Integer value3, String value4, String value5, String value6, Integer value7, Integer value8, Integer value9, Integer value10, Integer value11, Integer value12, Integer value13, String value14, String value15, String value16, String value17, String value18) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IFieldingofsplit from) {
        setPlayerid(from.getPlayerid());
        setYearid(from.getYearid());
        setStint(from.getStint());
        setTeamid(from.getTeamid());
        setLgid(from.getLgid());
        setPos(from.getPos());
        setG(from.getG());
        setGs(from.getGs());
        setInnouts(from.getInnouts());
        setPo(from.getPo());
        setA(from.getA());
        setE(from.getE());
        setDp(from.getDp());
        setPb(from.getPb());
        setWp(from.getWp());
        setSb(from.getSb());
        setCs(from.getCs());
        setZr(from.getZr());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IFieldingofsplit> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FieldingofsplitRecord
     */
    public FieldingofsplitRecord() {
        super(Fieldingofsplit.FIELDINGOFSPLIT);
    }

    /**
     * Create a detached, initialised FieldingofsplitRecord
     */
    public FieldingofsplitRecord(String playerid, Integer yearid, Integer stint, String teamid, String lgid, String pos, Integer g, Integer gs, Integer innouts, Integer po, Integer a, Integer e, Integer dp, String pb, String wp, String sb, String cs, String zr) {
        super(Fieldingofsplit.FIELDINGOFSPLIT);

        set(0, playerid);
        set(1, yearid);
        set(2, stint);
        set(3, teamid);
        set(4, lgid);
        set(5, pos);
        set(6, g);
        set(7, gs);
        set(8, innouts);
        set(9, po);
        set(10, a);
        set(11, e);
        set(12, dp);
        set(13, pb);
        set(14, wp);
        set(15, sb);
        set(16, cs);
        set(17, zr);
    }
}
