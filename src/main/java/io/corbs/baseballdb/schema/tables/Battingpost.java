/*
 * This file is generated by jOOQ.
*/
package io.corbs.baseballdb.schema.tables;


import io.corbs.baseballdb.schema.Baseballdb;
import io.corbs.baseballdb.schema.tables.records.BattingpostRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Battingpost extends TableImpl<BattingpostRecord> {

    private static final long serialVersionUID = 266932341;

    /**
     * The reference instance of <code>baseballdb.BattingPost</code>
     */
    public static final Battingpost BATTINGPOST = new Battingpost();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BattingpostRecord> getRecordType() {
        return BattingpostRecord.class;
    }

    /**
     * The column <code>baseballdb.BattingPost.yearID</code>.
     */
    public final TableField<BattingpostRecord, Integer> YEARID = createField("yearID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.round</code>.
     */
    public final TableField<BattingpostRecord, String> ROUND = createField("round", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.BattingPost.playerID</code>.
     */
    public final TableField<BattingpostRecord, String> PLAYERID = createField("playerID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.BattingPost.teamID</code>.
     */
    public final TableField<BattingpostRecord, String> TEAMID = createField("teamID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.BattingPost.lgID</code>.
     */
    public final TableField<BattingpostRecord, String> LGID = createField("lgID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.BattingPost.G</code>.
     */
    public final TableField<BattingpostRecord, Integer> G = createField("G", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.AB</code>.
     */
    public final TableField<BattingpostRecord, Integer> AB = createField("AB", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.R</code>.
     */
    public final TableField<BattingpostRecord, Integer> R = createField("R", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.H</code>.
     */
    public final TableField<BattingpostRecord, Integer> H = createField("H", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.2B</code>.
     */
    public final TableField<BattingpostRecord, Integer> _2B = createField("2B", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.3B</code>.
     */
    public final TableField<BattingpostRecord, Integer> _3B = createField("3B", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.HR</code>.
     */
    public final TableField<BattingpostRecord, Integer> HR = createField("HR", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.RBI</code>.
     */
    public final TableField<BattingpostRecord, Integer> RBI = createField("RBI", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.SB</code>.
     */
    public final TableField<BattingpostRecord, Integer> SB = createField("SB", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.CS</code>.
     */
    public final TableField<BattingpostRecord, String> CS = createField("CS", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.BattingPost.BB</code>.
     */
    public final TableField<BattingpostRecord, Integer> BB = createField("BB", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.SO</code>.
     */
    public final TableField<BattingpostRecord, Integer> SO = createField("SO", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.IBB</code>.
     */
    public final TableField<BattingpostRecord, Integer> IBB = createField("IBB", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>baseballdb.BattingPost.HBP</code>.
     */
    public final TableField<BattingpostRecord, String> HBP = createField("HBP", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.BattingPost.SH</code>.
     */
    public final TableField<BattingpostRecord, String> SH = createField("SH", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.BattingPost.SF</code>.
     */
    public final TableField<BattingpostRecord, String> SF = createField("SF", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>baseballdb.BattingPost.GIDP</code>.
     */
    public final TableField<BattingpostRecord, String> GIDP = createField("GIDP", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>baseballdb.BattingPost</code> table reference
     */
    public Battingpost() {
        this("BattingPost", null);
    }

    /**
     * Create an aliased <code>baseballdb.BattingPost</code> table reference
     */
    public Battingpost(String alias) {
        this(alias, BATTINGPOST);
    }

    private Battingpost(String alias, Table<BattingpostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Battingpost(String alias, Table<BattingpostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Baseballdb.BASEBALLDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Battingpost as(String alias) {
        return new Battingpost(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Battingpost rename(String name) {
        return new Battingpost(name, null);
    }
}
