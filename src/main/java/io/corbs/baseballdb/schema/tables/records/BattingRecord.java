/*
 * This file is generated by jOOQ.
*/
package io.corbs.baseballdb.schema.tables.records;


import io.corbs.baseballdb.schema.tables.Batting;
import io.corbs.baseballdb.schema.tables.interfaces.IBatting;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record22;
import org.jooq.Row22;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BattingRecord extends TableRecordImpl<BattingRecord> implements Record22<String, Integer, Integer, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, String, String, String, String, String>, IBatting {

    private static final long serialVersionUID = -1265698442;

    /**
     * Setter for <code>baseballdb.Batting.playerID</code>.
     */
    @Override
    public BattingRecord setPlayerid(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.playerID</code>.
     */
    @Override
    public String getPlayerid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>baseballdb.Batting.yearID</code>.
     */
    @Override
    public BattingRecord setYearid(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.yearID</code>.
     */
    @Override
    public Integer getYearid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>baseballdb.Batting.stint</code>.
     */
    @Override
    public BattingRecord setStint(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.stint</code>.
     */
    @Override
    public Integer getStint() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>baseballdb.Batting.teamID</code>.
     */
    @Override
    public BattingRecord setTeamid(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.teamID</code>.
     */
    @Override
    public String getTeamid() {
        return (String) get(3);
    }

    /**
     * Setter for <code>baseballdb.Batting.lgID</code>.
     */
    @Override
    public BattingRecord setLgid(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.lgID</code>.
     */
    @Override
    public String getLgid() {
        return (String) get(4);
    }

    /**
     * Setter for <code>baseballdb.Batting.G</code>.
     */
    @Override
    public BattingRecord setG(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.G</code>.
     */
    @Override
    public Integer getG() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>baseballdb.Batting.AB</code>.
     */
    @Override
    public BattingRecord setAb(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.AB</code>.
     */
    @Override
    public Integer getAb() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>baseballdb.Batting.R</code>.
     */
    @Override
    public BattingRecord setR(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.R</code>.
     */
    @Override
    public Integer getR() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>baseballdb.Batting.H</code>.
     */
    @Override
    public BattingRecord setH(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.H</code>.
     */
    @Override
    public Integer getH() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>baseballdb.Batting.2B</code>.
     */
    @Override
    public BattingRecord set_2b(Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.2B</code>.
     */
    @Override
    public Integer get_2b() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>baseballdb.Batting.3B</code>.
     */
    @Override
    public BattingRecord set_3b(Integer value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.3B</code>.
     */
    @Override
    public Integer get_3b() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>baseballdb.Batting.HR</code>.
     */
    @Override
    public BattingRecord setHr(Integer value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.HR</code>.
     */
    @Override
    public Integer getHr() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>baseballdb.Batting.RBI</code>.
     */
    @Override
    public BattingRecord setRbi(Integer value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.RBI</code>.
     */
    @Override
    public Integer getRbi() {
        return (Integer) get(12);
    }

    /**
     * Setter for <code>baseballdb.Batting.SB</code>.
     */
    @Override
    public BattingRecord setSb(Integer value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.SB</code>.
     */
    @Override
    public Integer getSb() {
        return (Integer) get(13);
    }

    /**
     * Setter for <code>baseballdb.Batting.CS</code>.
     */
    @Override
    public BattingRecord setCs(Integer value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.CS</code>.
     */
    @Override
    public Integer getCs() {
        return (Integer) get(14);
    }

    /**
     * Setter for <code>baseballdb.Batting.BB</code>.
     */
    @Override
    public BattingRecord setBb(Integer value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.BB</code>.
     */
    @Override
    public Integer getBb() {
        return (Integer) get(15);
    }

    /**
     * Setter for <code>baseballdb.Batting.SO</code>.
     */
    @Override
    public BattingRecord setSo(Integer value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.SO</code>.
     */
    @Override
    public Integer getSo() {
        return (Integer) get(16);
    }

    /**
     * Setter for <code>baseballdb.Batting.IBB</code>.
     */
    @Override
    public BattingRecord setIbb(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.IBB</code>.
     */
    @Override
    public String getIbb() {
        return (String) get(17);
    }

    /**
     * Setter for <code>baseballdb.Batting.HBP</code>.
     */
    @Override
    public BattingRecord setHbp(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.HBP</code>.
     */
    @Override
    public String getHbp() {
        return (String) get(18);
    }

    /**
     * Setter for <code>baseballdb.Batting.SH</code>.
     */
    @Override
    public BattingRecord setSh(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.SH</code>.
     */
    @Override
    public String getSh() {
        return (String) get(19);
    }

    /**
     * Setter for <code>baseballdb.Batting.SF</code>.
     */
    @Override
    public BattingRecord setSf(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.SF</code>.
     */
    @Override
    public String getSf() {
        return (String) get(20);
    }

    /**
     * Setter for <code>baseballdb.Batting.GIDP</code>.
     */
    @Override
    public BattingRecord setGidp(String value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>baseballdb.Batting.GIDP</code>.
     */
    @Override
    public String getGidp() {
        return (String) get(21);
    }

    // -------------------------------------------------------------------------
    // Record22 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row22<String, Integer, Integer, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, String, String, String, String, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row22<String, Integer, Integer, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, String, String, String, String, String> valuesRow() {
        return (Row22) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Batting.BATTING.PLAYERID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Batting.BATTING.YEARID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Batting.BATTING.STINT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Batting.BATTING.TEAMID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Batting.BATTING.LGID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return Batting.BATTING.G;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field7() {
        return Batting.BATTING.AB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field8() {
        return Batting.BATTING.R;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field9() {
        return Batting.BATTING.H;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field10() {
        return Batting.BATTING._2B;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field11() {
        return Batting.BATTING._3B;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field12() {
        return Batting.BATTING.HR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field13() {
        return Batting.BATTING.RBI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field14() {
        return Batting.BATTING.SB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field15() {
        return Batting.BATTING.CS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field16() {
        return Batting.BATTING.BB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field17() {
        return Batting.BATTING.SO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field18() {
        return Batting.BATTING.IBB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field19() {
        return Batting.BATTING.HBP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field20() {
        return Batting.BATTING.SH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field21() {
        return Batting.BATTING.SF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field22() {
        return Batting.BATTING.GIDP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getPlayerid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getYearid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getStint();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getTeamid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getLgid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getG();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value7() {
        return getAb();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value8() {
        return getR();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value9() {
        return getH();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value10() {
        return get_2b();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value11() {
        return get_3b();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value12() {
        return getHr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value13() {
        return getRbi();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value14() {
        return getSb();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value15() {
        return getCs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value16() {
        return getBb();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value17() {
        return getSo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value18() {
        return getIbb();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value19() {
        return getHbp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value20() {
        return getSh();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value21() {
        return getSf();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value22() {
        return getGidp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value1(String value) {
        setPlayerid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value2(Integer value) {
        setYearid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value3(Integer value) {
        setStint(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value4(String value) {
        setTeamid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value5(String value) {
        setLgid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value6(Integer value) {
        setG(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value7(Integer value) {
        setAb(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value8(Integer value) {
        setR(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value9(Integer value) {
        setH(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value10(Integer value) {
        set_2b(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value11(Integer value) {
        set_3b(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value12(Integer value) {
        setHr(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value13(Integer value) {
        setRbi(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value14(Integer value) {
        setSb(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value15(Integer value) {
        setCs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value16(Integer value) {
        setBb(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value17(Integer value) {
        setSo(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value18(String value) {
        setIbb(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value19(String value) {
        setHbp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value20(String value) {
        setSh(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value21(String value) {
        setSf(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord value22(String value) {
        setGidp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BattingRecord values(String value1, Integer value2, Integer value3, String value4, String value5, Integer value6, Integer value7, Integer value8, Integer value9, Integer value10, Integer value11, Integer value12, Integer value13, Integer value14, Integer value15, Integer value16, Integer value17, String value18, String value19, String value20, String value21, String value22) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        value21(value21);
        value22(value22);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IBatting from) {
        setPlayerid(from.getPlayerid());
        setYearid(from.getYearid());
        setStint(from.getStint());
        setTeamid(from.getTeamid());
        setLgid(from.getLgid());
        setG(from.getG());
        setAb(from.getAb());
        setR(from.getR());
        setH(from.getH());
        set_2b(from.get_2b());
        set_3b(from.get_3b());
        setHr(from.getHr());
        setRbi(from.getRbi());
        setSb(from.getSb());
        setCs(from.getCs());
        setBb(from.getBb());
        setSo(from.getSo());
        setIbb(from.getIbb());
        setHbp(from.getHbp());
        setSh(from.getSh());
        setSf(from.getSf());
        setGidp(from.getGidp());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IBatting> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BattingRecord
     */
    public BattingRecord() {
        super(Batting.BATTING);
    }

    /**
     * Create a detached, initialised BattingRecord
     */
    public BattingRecord(String playerid, Integer yearid, Integer stint, String teamid, String lgid, Integer g, Integer ab, Integer r, Integer h, Integer _2b, Integer _3b, Integer hr, Integer rbi, Integer sb, Integer cs, Integer bb, Integer so, String ibb, String hbp, String sh, String sf, String gidp) {
        super(Batting.BATTING);

        set(0, playerid);
        set(1, yearid);
        set(2, stint);
        set(3, teamid);
        set(4, lgid);
        set(5, g);
        set(6, ab);
        set(7, r);
        set(8, h);
        set(9, _2b);
        set(10, _3b);
        set(11, hr);
        set(12, rbi);
        set(13, sb);
        set(14, cs);
        set(15, bb);
        set(16, so);
        set(17, ibb);
        set(18, hbp);
        set(19, sh);
        set(20, sf);
        set(21, gidp);
    }
}
